generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
model User {
  id               Int            @id @default(autoincrement())
  email            String?        @unique
  password         String
  phoneNumber      String?        @unique
  name             String
  role             Role
  username         String?        @unique
  avatar           String?
  serviceProviders ServiceProvider[] 
  vehicles         Vehicle[]
  
  userBookings     Booking[]      @relation("UserBooking") // For userId relation
  customerBookings Booking[]      @relation("CustomerBooking") // For customerId relation

  reviews          Review[]
  notifications    Notification[]
  sentMessages     Message[]      @relation("UserSentMessages")
  receivedMessages Message[]      @relation("UserReceivedMessages")
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  Location         Location[]
}

model Booking {
  id                Int             @id @default(autoincrement())
  userId            Int
  serviceProviderId Int
  serviceId         Int
  employeeId        Int?
  status            BookingStatus   @default(PENDING)
  preferredTimeSlot DateTime?       // Nullable time preference from user
  confirmedTimeSlot DateTime?       // Confirmed time slot from provider
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)
  service           Service         @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  employee          Employee?       @relation(fields: [employeeId], references: [id])
  payments          Payment[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

enum BookingStatus {
  PENDING
  ACCEPTED
  REJECTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model ServiceProvider {
  id               Int             @id @default(autoincrement())
  email            String          @unique
  password         String
  phoneNumber      String
  businessName     String
  ownerName        String
  location         String
  latitude         Float
  longitude        Float
  description      String          // Added description field
  services         Service[]
  employees        Employee[]
  reviews          Review[]
  bookings         Booking[]
  availabilities   Availability[]
  sentMessages     Message[]       @relation("ServiceProviderSentMessages")
  receivedMessages Message[]       @relation("ServiceProviderReceivedMessages")
  availabilityStatus AvailabilityStatus @default(AVAILABLE)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}


model Message {
  id             Int             @id @default(autoincrement())
  senderUserId   Int?
  senderProviderId Int?
  receiverUserId Int?
  receiverProviderId Int?
  content        String
  sentAt         DateTime        @default(now())
  read           Boolean         @default(false)

  senderUser      User?            @relation("UserSentMessages", fields: [senderUserId], references: [id], onDelete: Cascade)
  senderProvider  ServiceProvider? @relation("ServiceProviderSentMessages", fields: [senderProviderId], references: [id], onDelete: Cascade)
  receiverUser    User?            @relation("UserReceivedMessages", fields: [receiverUserId], references: [id], onDelete: Cascade)
  receiverProvider ServiceProvider? @relation("ServiceProviderReceivedMessages", fields: [receiverProviderId], references: [id], onDelete: Cascade)
}

model Location {
  id        Int   @id @default(autoincrement())
  userId    Int
  latitude  Float
  longitude Float
  user      User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  CUSTOMER
  SERVICE_PROVIDER
  ADMIN
}


enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum AvailabilityStatus {
  AVAILABLE
  FULLY_BOOKED
}

model Review {
  id                Int             @id @default(autoincrement())
  userId            Int
  serviceProviderId Int
  rating            Float
  comment           String?
  createdAt         DateTime       @default(now())  // New: Timestamp for review date
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)
}

model Vehicle {
  id     Int    @id @default(autoincrement())
  userId Int
  vehicleNo String
  vin String
  make   String
  model  String
  year   Int
  pic String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model Payment {
  id        Int           @id @default(autoincrement())
  bookingId Int
  amount    Float?        // ✅ Make it nullable
  status    PaymentStatus
  booking   Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

model Service {
  id                Int             @id @default(autoincrement())
  serviceProviderId Int
  name              String
  description       String
  estimatedTime     String?          // ✅ Add this field
  price             Float?          // ✅ Make it nullable
  subServices       SubService[]
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)
  bookings          Booking[]
}

model SubService {
  id        Int     @id @default(autoincrement())
  serviceId Int
  cost Int?
    description       String  @default("")

  name      String
  estimatedTime     String?          // ✅ Add this field
  price     Float?  // ✅ Make it nullable
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Employee {
  id                Int             @id @default(autoincrement())
  name              String
  serviceProviderId Int
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)
  bookings          Booking[]
}

model Availability {
  id                Int             @id @default(autoincrement())
  serviceProviderId Int
  day               String
  startTime         DateTime
  endTime           DateTime
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)
}


